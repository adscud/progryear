{"version":3,"sources":["packages/progress/components/Progress.jsx","packages/progress/utils/convertTimeToPercentage.js","core/components/Footer.jsx","app/App.js","reportWebVitals.js","index.js"],"names":["Progress","React","useState","percentage","setPercentage","useEffect","interval","setInterval","now","Date","firstDayOfYear","getUTCFullYear","getTime","toFixed","convertTimeToPercentage","clearInterval","className","Title","width","Bar","date","empty","style","background","Footer","href","target","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAIaA,EAAW,WAAO,IAAD,EACYC,IAAMC,SAAS,GAD3B,mBAClBC,EADkB,KACNC,EADM,KAU1B,OAPAH,IAAMI,WAAU,WACZ,IAAMC,EAAWC,aAAY,WACzBH,ECRL,WACH,IAAMI,EAAM,IAAIC,KACVC,EAAiB,IAAID,KAAKD,EAAIG,iBAAkB,EAAG,GAEzD,QADwBH,EAAII,UAAYF,EAAeE,WAAa,IAJhD,QAKyB,KAAKC,QAAQ,GDIpCC,MACf,KACH,OAAO,kBAAMC,cAAcT,MAC5B,IAGC,sBAAKU,UAAU,qBAAf,UACI,cAACC,EAAD,CAAOC,MAAOf,IACd,cAACgB,EAAD,CAAKhB,WAAYA,QAK7B,SAASc,EAAT,GAA4B,IAAVC,EAAS,EAATA,MACd,OACI,sBAAKF,UAAU,yBAAf,UACI,oBAAIA,UAAU,iBAAd,4DACA,oBAAGA,UAAU,mBAAb,cAAkCE,EAAlC,WAKZ,SAASC,EAAT,GAA+B,IAAfhB,EAAc,EAAdA,WAAc,EACTF,IAAMC,SAAS,IAAIO,MAA5BW,EADkB,sBAERnB,IAAMC,SAASC,EAAa,KAAtCkB,EAFkB,oBAG1B,OACI,qCACI,qBAAKL,UAAU,eAAeM,MAAO,CACjCC,WAAW,kCAAD,OAAoCpB,EAApC,sBAA4DkB,EAA5D,SAEd,oBAAGL,UAAU,wBAAb,sBAA+Cb,EAA/C,QAAgEiB,EAAKT,uB,UEpCpEa,EAAS,WAClB,OACI,yBAAQR,UAAU,SAAlB,UACI,mBAAGA,UAAU,cAAb,6EACA,oBAAGA,UAAU,cAAb,oBAEI,mBACIS,KAAK,2BACLT,UAAU,cACVU,OAAO,SAHX,sECMDC,MAXf,WACI,OACI,qBAAKX,UAAU,MAAf,SACI,sBAAKA,UAAU,YAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,UCGDY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2941b8ea.chunk.js","sourcesContent":["import React from 'react'\nimport { convertTimeToPercentage } from \"../utils\"\nimport './Progress.js.css'\n\nexport const Progress = () => {\n    const [ percentage, setPercentage ] = React.useState(0)\n\n    React.useEffect(() => {\n        const interval = setInterval(() => {\n            setPercentage(convertTimeToPercentage())\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n    return (\n        <div className=\"progress-container\">\n            <Title width={percentage} />\n            <Bar percentage={percentage} />\n        </div>\n    )\n}\n\nfunction Title ({ width }) {\n    return (\n        <div className=\"progress-title-counter\">\n            <h2 className=\"progress-title\">Be brave, the year is almost done üëÄ</h2>\n            <p className=\"progress-counter\"> {width}% </p>\n        </div>\n    )\n}\n\nfunction Bar ({ percentage }) {\n    const [ date ] = React.useState(new Date())\n    const [ empty ] = React.useState(percentage - 100)\n    return (\n        <>\n            <div className=\"progress-bar\" style={{\n                background: `linear-gradient(90deg, #FFFFFF ${percentage}%, #101010 ${empty}%)`\n            }}/>\n            <p className=\"progress-bar-subtitle\">We spent {percentage}% of {date.getUTCFullYear()}</p>\n        </>\n    )\n}\n","const SECONDS_IN_YEAR = 31536000\nexport function convertTimeToPercentage () {\n    const now = new Date()\n    const firstDayOfYear = new Date(now.getUTCFullYear(), 0, 1) // 0 = January\n    const timeDifference = (now.getTime() - firstDayOfYear.getTime()) / 1000\n    return ((timeDifference / SECONDS_IN_YEAR) * 100).toFixed(2)\n}\n","import React from 'react'\nimport './Footer.jsx.css'\n\nexport const Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <p className=\"footer-text\">Simple site to know where we are in percentage during the year!</p>\n            <p className=\"footer-text\">\n                Made by\n                <a\n                    href=\"http://github.com/adscud\"\n                    className=\"footer-link\"\n                    target=\"_blank\"\n                >\n                    adscud üßëüèª‚Äçüíª\n                </a>\n            </p>\n        </footer>\n    )\n}\n","import './App.css'\nimport {Progress} from \"../packages/progress\"\nimport {Footer} from \"../core\";\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <div className=\"Container\">\n                <Progress/>\n                <Footer/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './app/App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}